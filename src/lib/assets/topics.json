[
    {
        "id": "AbsAlg",
        "label": "Abstract Algebra",
        "type": "Useful",
        "category": "Algebra",
        "description": "There are many contexts where one might want to define analogs of \"addition\" and \"multiplication\" for objects that aren't numbers. For example, colors, or configurations of a rubik's cube.\nAbstract Algebra is about classifying such \"algebraic structures\" by the properties they satisfy.",
        "keywords": "Group, Ring, Field, Ideal, Monoid, Module",
        "applications": "Geometric Deep Learning",
        "tags": "",
        "mm node": "AbsAlg(Abstract Algebra)",
        "mm color": "#f7e13d"
    },
    {
        "id": "AlgGeo",
        "label": "Algebraic Geometry",
        "type": "Niche",
        "category": "",
        "description": "",
        "keywords": "Algebraic Variety, Singularity, Log Canonical Threshold",
        "applications": "Singular Learning Theory",
        "tags": "",
        "mm node": "AlgGeo(Algebraic Geometry)",
        "mm color": "#9af73d"
    },
    {
        "id": "AlgTopo",
        "label": "Algebraic Topology",
        "type": "Niche",
        "category": "",
        "description": "",
        "keywords": "Simplicial Complex, Homology, Betti Numbers, Homotopy",
        "applications": "Topological Data Analysis",
        "tags": "NeedsInput",
        "mm node": "AlgTopo(Algebraic Topology)",
        "mm color": "#9af73d"
    },
    {
        "id": "AnGeom",
        "label": "Analytical Geometry",
        "type": "Useful",
        "category": "",
        "description": "Analytic Geometry is all about studying geometric objects such as curves or surfaces defined in a coordinate system. It usually serves as a prelude to Differential Geometry.",
        "keywords": "Implicit/Explicit Equations, Curvature, Torsion, Normal vector, Tangent vector",
        "applications": "",
        "tags": "",
        "mm node": "AnGeom(Analytical Geometry)",
        "mm color": "#f7e13d"
    },
    {
        "id": "Bayes",
        "label": "Bayesian Statistics",
        "type": "Important",
        "category": "Probability",
        "description": "A completely different approach to statistics, that makes heavy use of computation.",
        "keywords": "Prior, Posterior, Conjugate Distribution, MCMC",
        "applications": "",
        "tags": "",
        "mm node": "Bayes(Bayesian Statistics)",
        "mm color": "#f7ad3d"
    },
    {
        "id": "Cat",
        "label": "Category Theory",
        "type": "Useful",
        "category": "",
        "description": "A common theme in mathematics is that two seemingly different objects actually have very similar structures, and that one can translate from one to the other.\nCategory Theory is the formalization of this idea, and takes it to very high levels of abstraction. As such, it is easy to be confused, but it can provide very useful frames of view.",
        "keywords": "Category, Morphism, Functor, Monad, Compositionality, Lens, Optics, Topos",
        "applications": "Geometric Deep Learning",
        "tags": "",
        "mm node": "Cat(Category Theory)",
        "mm color": "#f7e13d"
    },
    {
        "id": "CellAut",
        "label": "Cellular Automata",
        "type": "Niche",
        "category": "Dynamical Systems",
        "description": "Cellular Automata are a simple example of discrete dynamical systems that can nonetheless exhibit extremely complex behavior. The most famous example of those is Conway's Game of Life.",
        "keywords": "Cellular Automaton",
        "applications": "Neural Cellular Automata",
        "tags": "",
        "mm node": "CellAut(Cellular Automata)",
        "mm color": "#9af73d"
    },
    {
        "id": "Chaos",
        "label": "Chaos Theory",
        "type": "Useful",
        "category": "Dynamical Systems",
        "description": "Some dynamical systems, even very small ones can exhibit very complicated behavior that is essentially impossible to predict in the long term, where a small difference at a given point can become very large after some time (aka the Butterfly Effect).",
        "keywords": "Strange Attractor, Lyapunov Exponent, Fractal Dimension, Edge of Chaos",
        "applications": "RNNs, Reservoir Computing, Echo State Networks",
        "tags": "",
        "mm node": "Chaos(Chaos Theory)",
        "mm color": "#f7e13d"
    },
    {
        "id": "Combin",
        "label": "Combinatorics",
        "type": "Useful",
        "category": "",
        "description": "Combinatorics is the science of counting various configurations of discrete things. It's not particularly difficult or long to learn, but it's useful for computing simple probabilities.",
        "keywords": "Permutation, Combination, Arrangements",
        "applications": "",
        "tags": "",
        "mm node": "Combin(Combinatorics)",
        "mm color": "#87dbd7"
    },
    {
        "id": "CompAn",
        "label": "Complex Analysis",
        "type": "Niche",
        "category": "Analysis",
        "description": "Calculus, but with complex numbers. This is beautiful mathematics but not particularly useful for ML in general.",
        "keywords": "Fourier Series, Holomorphic function, Laurent Series",
        "applications": "",
        "tags": "",
        "mm node": "CompAn(Complex Analysis)",
        "mm color": "#9af73d"
    },
    {
        "id": "Complexity",
        "label": "Complexity Theory",
        "type": "Useful",
        "category": "",
        "description": "Beyond computability of the solution of a given problem, one is often interested in the amount of time and memory needed to find a solution as the size of the problem increases. Computational Complexity handles these questions.",
        "keywords": "Complexity class, P=NP, NP-complete, NP-hard",
        "applications": "",
        "tags": "NeedsInput",
        "mm node": "Complexity(Complexity Theory)",
        "mm color": "#f7e13d"
    },
    {
        "id": "ComplexSys",
        "label": "Complex Systems",
        "type": "Useful",
        "category": "",
        "description": "There are many cases of systems with a large number of components exhibiting complex emergent behavior, in such a way that the whole is more than the sum of its parts. The field of Complex systems is an umbrella term for the study of this kind of systems in Physics, Network Science, Biology, Neuroscience, \u2026",
        "keywords": "Phase Transition, Critical treshold",
        "applications": "",
        "tags": "NeedsInput",
        "mm node": "ComplexSys(Complex Systems)",
        "mm color": "#f7e13d"
    },
    {
        "id": "Comput",
        "label": "Computability Theory",
        "type": "Useful",
        "category": "",
        "description": "The basic theory of computing machines, what they can, and cannot do.\nIt's rarely needed in practice, but it is required whenever one wants to model computations (e.g. those performed by a Large Language Model) rigorously.",
        "keywords": "Turing Machine, Halting Problem, Turing Completeness",
        "applications": "",
        "tags": "",
        "mm node": "Comput(Computability Theory)",
        "mm color": "#f7e13d"
    },
    {
        "id": "Control",
        "label": "Control Systems",
        "type": "Niche",
        "category": "Dynamical Systems",
        "description": "Sometimes, one wants to control the behavior of a given dynamical system. For example, ensuring that the temperature of a room does not become too low or too high. This is done by adding inputs to the system in question, and Control Theory is about designing those.",
        "keywords": "State-Space, Input-Output, Transfer Function, Impulse/Step Response",
        "applications": "Structured State-Space Models",
        "tags": "",
        "mm node": "Control(Control Systems)",
        "mm color": "#9af73d"
    },
    {
        "id": "Convex",
        "label": "Convex Analysis",
        "type": "Niche",
        "category": "Analysis",
        "description": "",
        "keywords": "",
        "applications": "",
        "tags": "NeedsInput",
        "mm node": "Convex(Convex Analysis)",
        "mm color": "#9af73d"
    },
    {
        "id": "DiffEq",
        "label": "Differential Equations",
        "type": "Niche",
        "category": "Dynamical Systems",
        "description": "There are many instances where describing a phenomenon directly is hard, but describing how it evolves through time is easy. Differential Equations are a classical example of this, and are the foundation of pretty much all modern science.",
        "keywords": "Ordinary Differential Equation (ODE), Cauchy Problem",
        "applications": "Neural ODEs, Normalizing Flows",
        "tags": "",
        "mm node": "DiffEq(Differential Equations)",
        "mm color": "#9af73d"
    },
    {
        "id": "DiffGeo",
        "label": "Differential Geometry",
        "type": "Useful",
        "category": "",
        "description": "Beyond analytical geometry, it's possible to study geometric objects when only knowing about how one moves around in them, without any explicit coordinates in a larger space.\nDifferential Geometry, and Riemannian geometry in particular is about taking that point of view, and have proven exceptionally powerful. In ML, the \"manifold hypothesis\" states that a given dataset consists of point sampled from such an object.",
        "keywords": "Differential Manifold, Riemannian Metric, Geodesic, Diffeomorphism, Parallel Transport, Exponential Map, Logarithmic Map",
        "applications": "Geometric Deep Learning",
        "tags": "",
        "mm node": "DiffGeo(Differential Geometry)",
        "mm color": "#f7e13d"
    },
    {
        "id": "DynSys",
        "label": "Dynamical Systems",
        "type": "Useful",
        "category": "Dynamical Systems",
        "description": "The study of things that change in time. Particular questions are the asymptotic behavior of a given dynamical system, e.g. will my optimizer actually converge to a minimum, or spin in circles?",
        "keywords": "Fixed Point, Limit Cycle, Attractor, Linear Stability, Bifurcation Theory",
        "applications": "RNNs, Deep Equilibrium Networks",
        "tags": "",
        "mm node": "DynSys(Dynamical Systems)",
        "mm color": "#f7e13d"
    },
    {
        "id": "FormalLogic",
        "label": "Formal Logic",
        "type": "Useful",
        "category": "",
        "description": "Classical logic may be the most common, but that doesn't mean we can't play with the rules. In particular, if we specify very carefully the \"logical rules\" we're allowed to follow, we can end up with vastly different results.",
        "keywords": "Formal Language, Axiom, Proof, Theorem, Incompleteness, Sequent Calculus",
        "applications": "Neural Theorem Proving",
        "tags": "",
        "mm node": "FormalLogic(Formal Logic)",
        "mm color": "#f7e13d"
    },
    {
        "id": "FunAn",
        "label": "Functional Analysis",
        "type": "Useful",
        "category": "Analysis",
        "description": "Functions (e.g. continuous functions on the reals) form vector spaces, which is nice. Unfortunately, these vector spaces have infinite dimension, so we need to add some topology to stay sane.",
        "keywords": "Banach Space, Hilbert Space, Operator Theory",
        "applications": "Neural Tangent Kernel, Kernel Machines",
        "tags": "",
        "mm node": "FunAn(Functional Analysis)",
        "mm color": "#f7e13d"
    },
    {
        "id": "Game",
        "label": "Game Theory",
        "type": "Niche",
        "category": "",
        "description": "Game Theory is about analyzing situations where multiple \"agents\" make decisions to maximize their own benefit. Often this puts the agents in conflict with each other.\nThis is not massively useful for ML, but it does come up in a few places.",
        "keywords": "Nash Equilibrium, Zero-Sum Game, Prisoner\u2019s Dilemna",
        "applications": "",
        "tags": "",
        "mm node": "Game(Game Theory)",
        "mm color": "#9af73d"
    },
    {
        "id": "GenTopo",
        "label": "General Topology",
        "type": "Important",
        "category": "Analysis",
        "description": "Much like Abstract Algebra is about generalizing operations on the reals, Topology is about generalizing Calculus. In particular, the notions of \"convergence\" and \"continuity\" are given more abstract definitions that broaden their applicability.",
        "keywords": "Topology, Open/Closed sets, Compact sets, Homeomorphism, Hausdorff",
        "applications": "",
        "tags": "",
        "mm node": "GenTopo(General Topology)",
        "mm color": "#f7ad3d"
    },
    {
        "id": "GeoAlg",
        "label": "Geometric Algebra",
        "type": "Niche",
        "category": "Algebra",
        "description": "",
        "keywords": "Clifford Algebra",
        "applications": "",
        "tags": "",
        "mm node": "GeoAlg(Geometric Algebra)",
        "mm color": "#9af73d"
    },
    {
        "id": "Graph",
        "label": "Graph Theory",
        "type": "Useful",
        "category": "",
        "description": "",
        "keywords": "Graph, Vertex, Edge, Shortest Path, Tree, Colorings",
        "applications": "Graph Neural Networks",
        "tags": "",
        "mm node": "Graph(Graph Theory)",
        "mm color": "#f7e13d"
    },
    {
        "id": "HamMech",
        "label": "Hamiltonian Mechanics",
        "type": "Niche",
        "category": "Dynamical Systems",
        "description": "A step up above Lagrangian Mechanics. It is particularly used in Quantum Mechanics, but also has some nice applications in Bayesian Inference.",
        "keywords": "Hamiltonian, Poisson Bracket, Liouville Theorem",
        "applications": "",
        "tags": "",
        "mm node": "HamMech(Hamiltonian Mechanics)",
        "mm color": "#9af73d"
    },
    {
        "id": "HighSchool",
        "label": "High School Mathematics",
        "type": "Useful",
        "category": "",
        "description": "The standard High School Math curriculum in most countries. It's not strictly necessary, but most First year university math courses assume some familiarity with it, but cover it more rigorously anyway.",
        "keywords": "Euclidian Geometry, Trigonometry, Algebra, Calculus, Complex Numbers",
        "applications": "",
        "tags": "",
        "mm node": "HighSchool(High School Mathematics)",
        "mm color": "#87dbd7"
    },
    {
        "id": "Info",
        "label": "Information Theory",
        "type": "Useful",
        "category": "Probability",
        "description": "",
        "keywords": "Entropy, Kullback-Liebler Divergence, Cross-Entropy, Mutual Information",
        "applications": "",
        "tags": "NeedsInput",
        "mm node": "Info(Information Theory)",
        "mm color": "#f7e13d"
    },
    {
        "id": "InfoGeom",
        "label": "Information Geometry",
        "type": "Niche",
        "category": "Probability",
        "description": "If you squint a bit, the Fisher Information Matrix of a probabilty distribution looks a lot like a Riemannian Metric. It turns out it is, and you can study \"manifolds\" of probability distributions.",
        "keywords": "Fisher Information Metric, Statistical Manifolds",
        "applications": "",
        "tags": "NeedsInput",
        "mm node": "InfoGeom(Information Geometry)",
        "mm color": "#9af73d"
    },
    {
        "id": "Koopman",
        "label": "Koopman Theory",
        "type": "Niche",
        "category": "Dynamical Systems",
        "description": "PCA, but for arbitrary dynamical systems. 'nuff said.",
        "keywords": "Koopman Operator, DMD, EDMD",
        "applications": "",
        "tags": "",
        "mm node": "Koopman(Koopman Theory)",
        "mm color": "#9af73d"
    },
    {
        "id": "LagMech",
        "label": "Lagrangian Mechanics",
        "type": "Niche",
        "category": "Dynamical Systems",
        "description": "Newtonian mechanics are a bit inefficient, in that we can usually exploit symmetries to reduce the dimension of our system. Add a few more things and we end up with a very powerful framework that is still the bread and butter of modern physics today.",
        "keywords": "Lagrangian, Euler-Lagrange Equations",
        "applications": "",
        "tags": "",
        "mm node": "LagMech(Lagrangian Mechanics)",
        "mm color": "#9af73d"
    },
    {
        "id": "LinAlg",
        "label": "Linear Algebra",
        "type": "Important",
        "category": "Algebra",
        "description": "Vectors and Matrices are ubiquitous in ML. In math, they are a language that can be used to understand pretty much every other part of mathematics. As such, this is one of few topics that are worth learning in as much depth as possible.",
        "keywords": "Vector Spaces, Matrices, Eigenvalues, SVD, Tensors",
        "applications": "EVERYTHING",
        "tags": "",
        "mm node": "LinAlg(Linear Algebra)",
        "mm color": "#f74d3d"
    },
    {
        "id": "LinReg",
        "label": "Linear Regression",
        "type": "Important",
        "category": "Probability",
        "description": "Linear regression is one of the most basic models in Statistics/ML. Even so, it already features problems like overfitting, bias, etc, while still having its uses.\nAs such, having a good understanding of it is helpful when working with much more complicated models.",
        "keywords": "Least-Squares, Ridge Regression, LASSO",
        "applications": "",
        "tags": "",
        "mm node": "LinReg(Linear Regression)",
        "mm color": "#f7ad3d"
    },
    {
        "id": "Logic",
        "label": "Classical Logic",
        "type": "Useful",
        "category": "",
        "description": "When mathematicians write a proof of something, they have to follow specific rules for their reasoning to be correct. Almost always, these rules are those of Classical Logic.\nThis is not particularly difficult to learn, but it's part of the basic language used everywhere in mathematics.",
        "keywords": "Proposition, Predicate, Quantifier, Modus Potens, Modus Tollens, Tautology, Contradiction, Proof by Induction, Principle of Excluded Middle",
        "applications": "",
        "tags": "NeedsInput",
        "mm node": "Logic(Classical Logic)",
        "mm color": "#f7e13d"
    },
    {
        "id": "Measure",
        "label": "Measure Theory",
        "type": "Important",
        "category": "Probability",
        "description": "The classical theory of integration seen in first year calculus unfortunately has some shortcomings. Even more unfortunate is that quite a lot of machinery is required to fix that. Measure theory is one of the more difficult topics, and is pretty much required for any advanced topics in probability.",
        "keywords": "Sigma-algebra, measurable space, measurable function, Lebesgue integral, Borel measure",
        "applications": "",
        "tags": "",
        "mm node": "Measure(Measure Theory)",
        "mm color": "#f7ad3d"
    },
    {
        "id": "Mech",
        "label": "Newtonian Mechanics",
        "type": "Niche",
        "category": "Dynamical Systems",
        "description": "As the name suggest, this is the description of moving objects originally formulated by Newton. It makes heavy use of differential equations. Not directly useful for ML, but helps motivate the more abstract stuff.",
        "keywords": "Velocity, Acceleration, Newton\u2019s Laws",
        "applications": "",
        "tags": "",
        "mm node": "Mech(Newtonian Mechanics)",
        "mm color": "#9af73d"
    },
    {
        "id": "Network",
        "label": "Network Science",
        "type": "Niche",
        "category": "",
        "description": "Network science is the applied, physics flavored version of Graph Theory. The main difference is that it typically looks at the statistical properties of families of random graphs, and of dynamical processes taking place on them.",
        "keywords": "Network, Random Graph, Degree Distribution, Erdos-Renyi, Watts-Strogatz, Barabasi-Albert",
        "applications": "",
        "tags": "",
        "mm node": "Network(Network Science)",
        "mm color": "#9af73d"
    },
    {
        "id": "NumAn",
        "label": "Numerical Analysis",
        "type": "Important",
        "category": "Numerical Analysis",
        "description": "Whenever doing mathematics on a computer,we are faced with the problem that we cannot represent exactly most mathematical objects. Numerical Analysis is about algorithms to approximate things like real functions in a computer.",
        "keywords": "Function Approximation, Quadrature, Interpolation, ODE solver",
        "applications": "",
        "tags": "",
        "mm node": "NumAn(Numerical Analysis)",
        "mm color": "#f7ad3d"
    },
    {
        "id": "NumLinAlg",
        "label": "Numerical Linear Algebra",
        "type": "Useful",
        "category": "Numerical Analysis",
        "description": "Like numerical analysis, but for linear algebra specifically. This is all about exploiting the structure of your matrices to compute matmuls, solve linear problems, solve eigenproblems, \u2026 as efficiently as possible.",
        "keywords": "Condition Number, LU decomposition, QR decomposition, Conjugate Gradient, Power Method",
        "applications": "",
        "tags": "",
        "mm node": "NumLinAlg(Numerical Linear Algebra)",
        "mm color": "#f7e13d"
    },
    {
        "id": "Optim",
        "label": "Optimization",
        "type": "Important",
        "category": "Numerical Analysis",
        "description": "The training of pretty much any model in machine learning is formulated as an optimization problem. The field of (numerical) optimization is about the algorithms for solving such problems, and their properties.",
        "keywords": "Gradient Descent, Conditionning, Learning Rate",
        "applications": "",
        "tags": "",
        "mm node": "Optim(Optimization)",
        "mm color": "#f74d3d"
    },
    {
        "id": "OptimTrans",
        "label": "Optimal Transport",
        "type": "Niche",
        "category": "Probability",
        "description": "",
        "keywords": "Wasserstein metric, Earth Mover\u2019s Distance, Sinkhorn method",
        "applications": "",
        "tags": "NeedsInput",
        "mm node": "OptimTrans(Optimal Transport)",
        "mm color": "#9af73d"
    },
    {
        "id": "PDE",
        "label": "Partial Differential Equations",
        "type": "Niche",
        "category": "Dynamical Systems",
        "description": "",
        "keywords": "Boundary value problem, Heat Equation, Poisson Equation, Wave Equation, Infinitesimal Generator, Operator Semigroup, Green\u2019s Function, Distribution Theory",
        "applications": "Neural Operators, CNNs, PINNs",
        "tags": "NeedsInput",
        "mm node": "PDE(Partial Differential Equations)",
        "mm color": "#9af73d"
    },
    {
        "id": "Proba",
        "label": "Probability",
        "type": "Important",
        "category": "Probability",
        "description": "Any time we wish to describe a system which about which we don't have all the information, or that involves some amount of randomness, we must resort to the language of probability theory.\nThis is topic is especially important in Machine Learning, as evidenced by the fact that the most successful current architectures are fundamentally probabilistic.",
        "keywords": "Probability Distribution, Expected Value, Conditional Probability, Moment Generating Function",
        "applications": "EVERYTHING",
        "tags": "",
        "mm node": "Proba(Probability)",
        "mm color": "#f74d3d"
    },
    {
        "id": "RandMat",
        "label": "Random Matrix Theory",
        "type": "Niche",
        "category": "Probability",
        "description": "You have a large matrix whose entries are randomly distributed, and you'd like to know about it's eigenvalues.\nSadly, this a fairly difficult problem.",
        "keywords": "Wigner semicircle distribution, Gaussian Ensemble",
        "applications": "",
        "tags": "NeedsInput",
        "mm node": "RandMat(Random Matrix Theory)",
        "mm color": "#9af73d"
    },
    {
        "id": "RealAn",
        "label": "Calculus",
        "type": "Important",
        "category": "Analysis",
        "description": "",
        "keywords": "Sequence, Limit, Infinite Series, Continuous Function, Derivative, Gradient, Taylor Series, Riemann Integral",
        "applications": "EVERYTHING",
        "tags": "",
        "mm node": "RealAn(Calculus)",
        "mm color": "#f74d3d"
    },
    {
        "id": "Representation",
        "label": "Representation Theory",
        "type": "Niche",
        "category": "Algebra",
        "description": "Remember how the abstract group of permutations is somehow \"implemented\" by by the set of permutation matrices? Well it turns out you can represent a lot of abstract groups that way. This means we can apply tools from linear algebra to study abstract algebraic problems.",
        "keywords": "",
        "applications": "Geometric Deep Learning",
        "tags": "NeedsInput",
        "mm node": "Representation(Representation Theory)",
        "mm color": "#9af73d"
    },
    {
        "id": "Set",
        "label": "Set Theory",
        "type": "Useful",
        "category": "",
        "description": "",
        "keywords": "Set, element, Cartesian product, Function, Relation",
        "applications": "",
        "tags": "",
        "mm node": "Set(Set Theory)",
        "mm color": "#87dbd7"
    },
    {
        "id": "Signal",
        "label": "Signal Processing",
        "type": "Useful",
        "category": "",
        "description": "",
        "keywords": "Wavelets, Kalman Filter, Convolution, Fourier Transform",
        "applications": "CNNs",
        "tags": "NeedsInput",
        "mm node": "Signal(Signal Processing)",
        "mm color": "#f7e13d"
    },
    {
        "id": "StatMech",
        "label": "Statistical Mechanics",
        "type": "Niche",
        "category": "Probability",
        "description": "Probability Theory's evil twin. Statistical mechanics was developed independently by Physicists to describe systems like gases, with a large number of interacting elements, such that their behavior can only be described statistically.\nIt has kept a lot of its particular jargon and methods.",
        "keywords": "Gibbs Distribution, Partition Function, Inverse Temperature, Boltzmann Distribution",
        "applications": "",
        "tags": "",
        "mm node": "StatMech(Statistical Mechanics)",
        "mm color": "#9af73d"
    },
    {
        "id": "Stats",
        "label": "Statistics",
        "type": "Important",
        "category": "Probability",
        "description": "Probability Theory's twin. Statistics is about recovering information about a random process (e.g. the parameters of a probability distribution) from empirical observations.",
        "keywords": "Estimator, Maximum Likelihood, Bias, Variance",
        "applications": "",
        "tags": "",
        "mm node": "Stats(Statistics)",
        "mm color": "#f7ad3d"
    },
    {
        "id": "Stoch",
        "label": "Stochastic Processes",
        "type": "Niche",
        "category": "Probability",
        "description": "Beyond random variables that take a single numerical value, one may be interested in talking about \"random functions\". Markov chains are a simple example, but for the fully continuous case, a lot of Measure theory is necessary.",
        "keywords": "Gaussian Process, Diffusion Process, Stochastic Differential Equation (SDE), Fokker-Planck Equation, Brownian Motion, Langevin Dynamics",
        "applications": "Diffusion Models",
        "tags": "NeedsInput",
        "mm node": "Stoch(Stochastic Processes)",
        "mm color": "#9af73d"
    },
    {
        "id": "TropGeom",
        "label": "Tropical Geometry",
        "type": "Niche",
        "category": "",
        "description": "",
        "keywords": "Tropical semiring",
        "applications": "Interpretability",
        "tags": "NeedsInput",
        "mm node": "TropGeom(Tropical Geometry)",
        "mm color": "#9af73d"
    }
]